/*
Transaction

https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-transaction/

A database transaction is a single unit of work that consists of one or more operations.

A classical example of a transaction is a bank transfer from one account to another. 

A PostgreSQL transaction is atomic, consistent, isolated, and durable. These properties are often referred to as ACID:

Atomic = All or nothing
Consistency = Valid data
Isolation = Transaction visibility
Durability = Permanent

*/

-- Setup

CREATE DATABASE demo_transactions;

DROP TABLE IF EXISTS accounts;

CREATE TABLE accounts (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    balance DEC(15,2) NOT NULL,
    PRIMARY KEY(id)
);

/*

BEGIN
BEGIN WORK
BEGIN TRANSACTION

...is the same

*/

INSERT INTO accounts(name,balance)
VALUES('Bob',10000);

-- Start a transaction

BEGIN;

INSERT INTO accounts(name,balance)
VALUES('6666666',10000);

-- Alice is visible in this session (=TCP connections) but not in other.
-- Just open a new tab and you get a new connection
-- No worries if you have "Auto commit" checked

SELECT * FROM accounts;

-- Commit

COMMIT; -- if no transaction in progress, we get a warning

/*
Update, not visible in the other connection until we do a commit
*/

BEGIN;

UPDATE accounts 
SET balance = balance - 1000
WHERE id = 1;

SELECT * FROM accounts;
COMMIT;

/*
Rollback transaction, you can use any of

ROLLBACK;
ROLLBACK TRANSACTION;
ROLLBACK WORK;

*/

-- begin the transaction
BEGIN;

-- deduct the amount from the account 1
UPDATE accounts 
SET balance = balance - 1500
WHERE id = 1;

-- add the amount from the account 2 
UPDATE accounts
SET balance = balance + 1500
WHERE id = 2; 

-- View the result
SELECT * FROM accounts;

-- roll back the transaction
ROLLBACK;

-- Now view the result again
SELECT * FROM accounts;

